{"version":3,"sources":["App.js","index.js"],"names":["App","useState","window","setWindow","pokemon","setPokemon","useQuery","size","fetch","Math","floor","then","res","json","refetchInterval","onSuccess","console","log","resPok","results","prev","onError","err","isLoading","isFetching","error","data","className","map","pok","name","rootElement","document","getElementById","root","createRoot","queryClient","QueryClient","render","client"],"mappings":"uOAUe,SAASA,IACtB,MAA4BC,mBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAoDC,mBAClD,eACA,kBAZgBC,EAYCL,EAXZM,MAAM,4CAAD,OACkCC,KAAKC,MAC9CH,GAAQA,EAAO,GAAM,GAFd,kBAGCA,IACXI,MAAK,SAACC,GAAD,OAASA,EAAIC,MAAb,IALU,IAACN,CAYhB,GACA,CACEO,gBAAiBZ,GAAU,GAAI,IAC/Ba,UAAW,SAACH,GACVI,QAAQC,IAAI,MAAOL,GACnB,IAAIM,EAASN,EAAIO,QACjBhB,GAAU,SAACiB,GAAD,OAAUA,EAAO,CAAjB,IACVf,GAAW,SAACe,GAAD,4BAAcA,GAAd,YAAuBF,GAAvB,GACZ,EACDG,QAAS,SAACC,GACRN,QAAQC,IAAI,MAAOK,EACpB,IAbGC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,WAAnB,EAA+BC,MAA/B,EAAsCC,KAiBtC,OADAV,QAAQC,IAAI,MAAOb,GACfmB,EAAkB,yCAEpB,sBAAKI,UAAU,MAAf,UACGvB,EAAQwB,KAAI,SAACC,GAAD,OACX,mCACE,6BAAKA,EAAIC,QAFA,IAKZN,GAAc,mDAGpB,CCnCD,IAAMO,EAAcC,SAASC,eAAe,QACtCC,EAAOC,qBAAWJ,GAClBK,EAAc,IAAIC,cACxBH,EAAKI,OACH,cAAC,aAAD,UACE,cAAC,sBAAD,CAAqBC,OAAQH,EAA7B,SACE,cAACpC,EAAD,Q","file":"static/js/main.ba9bbbcd.chunk.js","sourcesContent":["import \"./styles.css\";\nimport { useState } from \"react\";\nimport { useQuery } from \"react-query\";\nconst getPokemon = (size) => {\n  return fetch(\n    `https://pokeapi.co/api/v2/pokemon?offset=${Math.floor(\n      (size * (size + 1)) / 2\n    )}&limit=${size}`\n  ).then((res) => res.json());\n};\nexport default function App() {\n  const [window, setWindow] = useState(1);\n  const [pokemon, setPokemon] = useState([]);\n  const { isLoading, isFetching, error, data = {} } = useQuery(\n    \"GET_POKEMON\",\n    () => getPokemon(window),\n    {\n      refetchInterval: window <= 4 ? 3000 : false,\n      onSuccess: (res) => {\n        console.log(\"res\", res);\n        let resPok = res.results;\n        setWindow((prev) => prev + 1);\n        setPokemon((prev) => [...prev, ...resPok]);\n      },\n      onError: (err) => {\n        console.log(\"err\", err);\n      }\n    }\n  );\n  console.log(\"pok\", pokemon);\n  if (isLoading) return <h1>Loading</h1>;\n  return (\n    <div className=\"App\">\n      {pokemon.map((pok) => (\n        <>\n          <h1>{pok.name}</h1>\n        </>\n      ))}\n      {isFetching && <h4>Loading Pokemon</h4>}\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { QueryClientProvider, QueryClient } from \"react-query\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nconst queryClient = new QueryClient();\nroot.render(\n  <StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </StrictMode>\n);\n"],"sourceRoot":""}